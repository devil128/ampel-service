type Query {
    users(filter: String, from: String, to: String):[Student]
    user(username: String, place: String, from: String, to: String):Student
    logs(username: String, place: String, from: String, to: String, page: Int, pageSize: Int): [StudentLog]

}

type Subscription {
    users(filter: String, from: String, to: String): [Student]
}



type Log{
    ts: Int
    success: Boolean
}
type StudentLog{
    timestamp: String
    success: Boolean
    networks: [StudentNetwork]
    student: Student
}
type StudentNetwork{
    network: String
    online: Boolean
}
type Student{
    username: String
    place: String
    isFailed: Boolean
    isComplete: Boolean,
    timeOnline: Float,
    maxTimeBetweenLogs: Float,
    logCount: Int,
    logs: [StudentLog],
    activeNetworks: [String]
}

input LogData{
    success: Boolean
    name: String
    place: String
    timestamp: String
    networkInterfaces: [NetworkPair]
}
input NetworkPair{
    network: String
    online: Boolean
}
